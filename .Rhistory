install.packages("caret")
install.packages("e1071")
install.packages("class")
install.packages("randomForest")
install.packages("ggplot2")
library(caret)
library(e1071)
library(randomForest)
library(class)
library(ggplot2)
# Load and preprocess the data
walmart_data <- read.csv("dataset/Walmart_Sales.csv")
walmart_data$Date <- as.Date(walmart_data$Date, format="%d-%m-%Y")
as.Date(walmart_data$Data)
walmart_data$Date <- as.Date(walmart_data$Date, format="%d-%m-%Y")
s=as.Date(walmart_data$Data)
s
walmart_data$Date
s <- as.Date(walmart_data$Date, format="%d-%m-%Y")
s
source("~/.active-rstudio-document", echo=TRUE)
s=as.Date(walmart_data$Data,format="%Y--%m--%d")
s
s
s<-as.Date(walmart_data$Date,format="%Y--%m--%d")
s
s<-as.Date(walmart_data$Date,format="%Y%m%d")
s
s<-as.Date(walmart_data$Date)
s
# Feature Scaling
preProcValues <- preProcess(walmart_data[, c("Temperature", "Fuel_Price", "CPI", "Unemployment")], method = c("center", "scale"))
preProcValues
# Feature Scaling
preProcValues <- preProcess(walmart_data[c("Temperature", "Fuel_Price", "CPI", "Unemployment")], method = c("center", "scale"))
preProcValues
walmart_data_scaled <- predict(preProcValues, walmart_data)
walmart_data_scaled
# Splitting the dataset into training and test sets
set.seed(123)
trainIndex <- createDataPartition(walmart_data_scaled$Weekly_Sales, p = .8,
list = FALSE,
times = 1)
trainIndex
train_data <- walmart_data_scaled[ trainIndex,]
test_data  <- walmart_data_scaled[-trainIndex,]
train_data
#assigning the train index to test data thatis 20% with negative indexing [-]
test_data  <- walmart_data_scaled[-trainIndex,]
# 1. k-Nearest Neighbors (kNN) #weekly sales is independent variable
knn_model <- knn(Weekly_Sales ~ Temperature + Fuel_Price + CPI + Unemployment + Holiday_Flag,
data = train_data,
method = "knn",
tuneLength = 5)
# 1. k-Nearest Neighbors (kNN) #weekly sales is independent variable
knn_model <- train(Weekly_Sales ~ Temperature + Fuel_Price + CPI + Unemployment + Holiday_Flag,
data = train_data,
method = "knn",
tuneLength = 5)
knn_preds <- predict(knn_model, test_data)
knn_preds
knn_rmse <- RMSE(knn_preds, test_data$Weekly_Sales)
knn_rmse
# 2. Polynomial Regression
poly_model <- lm(Weekly_Sales ~ poly(Temperature, 2) + poly(Fuel_Price, 2) + poly(CPI, 2) +
poly(Unemployment, 2) + Holiday_Flag, data = train_data)
poly_preds <- predict(poly_model, test_data)
poly_rmse <- RMSE(poly_preds, test_data$Weekly_Sales)
poly_rmse
# 3. Naive Bayes
nb_model <- naiveBayes(Weekly_Sales ~ Temperature + Fuel_Price + CPI + Unemployment + Holiday_Flag,
data = train_data)
nb_preds <- predict(nb_model, test_data, type="raw")
lm_rmse
poly_model <- lm(Weekly_Sales ~ poly(Temperature, 2) + poly(Fuel_Price, 2) + poly(CPI, 2) +
poly(Unemployment, 2) + Holiday_Flag, data = train_data)
poly_preds <- predict(poly_model, test_data)
poly_rmse <- RMSE(poly_preds, test_data$Weekly_Sales)
poly_rmse
nb_model <- naiveBayes(Weekly_Sales ~ Temperature + Fuel_Price + CPI + Unemployment + Holiday_Flag,
data = train_data)
nb_preds <- predict(nb_model, test_data, type="raw")
